{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":34377,"databundleVersionId":3220602,"sourceType":"competition"}],"dockerImageVersionId":30380,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.experimental import enable_iterative_imputer\nfrom sklearn.impute import (SimpleImputer, IterativeImputer)\nfrom sklearn.preprocessing import (OneHotEncoder, StandardScaler)\nfrom sklearn.model_selection import (GridSearchCV, cross_val_score)\nfrom sklearn.feature_selection import SequentialFeatureSelector\nfrom sklearn.cluster import KMeans\nfrom category_encoders import MEstimateEncoder\nfrom imblearn.over_sampling import SMOTE\nfrom catboost import CatBoostClassifier","metadata":{"execution":{"iopub.status.busy":"2023-02-19T23:51:55.988362Z","iopub.execute_input":"2023-02-19T23:51:55.988736Z","iopub.status.idle":"2023-02-19T23:51:55.995337Z","shell.execute_reply.started":"2023-02-19T23:51:55.988708Z","shell.execute_reply":"2023-02-19T23:51:55.994307Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Load data\nfull_df = pd.read_csv('/kaggle/input/spaceship-titanic/train.csv')\ntest_df = pd.read_csv('/kaggle/input/spaceship-titanic/test.csv')","metadata":{"execution":{"iopub.status.busy":"2023-02-19T23:51:56.030688Z","iopub.execute_input":"2023-02-19T23:51:56.031043Z","iopub.status.idle":"2023-02-19T23:51:56.063264Z","shell.execute_reply.started":"2023-02-19T23:51:56.030982Z","shell.execute_reply":"2023-02-19T23:51:56.062586Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Analyze data","metadata":{}},{"cell_type":"code","source":"full_df.head()","metadata":{"execution":{"iopub.status.busy":"2023-02-19T23:51:56.081648Z","iopub.execute_input":"2023-02-19T23:51:56.082067Z","iopub.status.idle":"2023-02-19T23:51:56.098373Z","shell.execute_reply.started":"2023-02-19T23:51:56.082042Z","shell.execute_reply":"2023-02-19T23:51:56.097571Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Separate test_df PassengerId (will need it for submission)\ntest_pass_id = test_df.PassengerId.copy()\n\n# Keep max index that will be used to back split training and test data\nX_max_index = full_df.shape[0]\n\n# Separate features and target\ny = full_df.Transported.astype(int)\n\ndf = full_df.drop(['Transported'], axis=1).copy()\ndf = pd.concat([df, test_df], axis=0).reset_index(drop=True)\n\ndf.info()","metadata":{"execution":{"iopub.status.busy":"2023-02-19T23:51:56.23578Z","iopub.execute_input":"2023-02-19T23:51:56.236152Z","iopub.status.idle":"2023-02-19T23:51:56.260163Z","shell.execute_reply.started":"2023-02-19T23:51:56.23612Z","shell.execute_reply":"2023-02-19T23:51:56.259221Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Unprocessed data correlation","metadata":{}},{"cell_type":"code","source":"full_df.corr()['Transported'].sort_values(ascending=False)","metadata":{"execution":{"iopub.status.busy":"2023-02-19T23:51:56.289991Z","iopub.execute_input":"2023-02-19T23:51:56.290261Z","iopub.status.idle":"2023-02-19T23:51:56.299989Z","shell.execute_reply.started":"2023-02-19T23:51:56.290238Z","shell.execute_reply":"2023-02-19T23:51:56.298668Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Features' instances","metadata":{"execution":{"iopub.status.busy":"2023-02-10T20:23:40.424068Z","iopub.execute_input":"2023-02-10T20:23:40.424524Z","iopub.status.idle":"2023-02-10T20:23:40.4312Z","shell.execute_reply.started":"2023-02-10T20:23:40.424486Z","shell.execute_reply":"2023-02-10T20:23:40.429671Z"}}},{"cell_type":"code","source":"df.hist(bins=30, figsize=(12, 8))\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-02-19T23:51:56.337657Z","iopub.execute_input":"2023-02-19T23:51:56.337975Z","iopub.status.idle":"2023-02-19T23:51:57.138401Z","shell.execute_reply.started":"2023-02-19T23:51:56.337951Z","shell.execute_reply":"2023-02-19T23:51:57.137337Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Process data","metadata":{}},{"cell_type":"code","source":"# Split passenger group into separate feature\ndf['Pass_group'] = df.PassengerId.str.split('_').str[0]\ndf.Pass_group = df.Pass_group.astype(float)\n\n# Split Lastname into separate feature\ndf['Lastname'] = df.Name.str.split(' ').str[1]\n\n# Split Cabin into 3 separate features\ndf[['Deck', 'Cab_num', 'Deck_side']] = df.Cabin.str.split('/', expand=True)\ndf.Cab_num = df.Cab_num.astype(float)","metadata":{"execution":{"iopub.status.busy":"2023-02-19T23:51:57.141523Z","iopub.execute_input":"2023-02-19T23:51:57.141803Z","iopub.status.idle":"2023-02-19T23:51:57.794436Z","shell.execute_reply.started":"2023-02-19T23:51:57.141772Z","shell.execute_reply":"2023-02-19T23:51:57.793572Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Dealing with the outliers","metadata":{}},{"cell_type":"code","source":"# Looking for outliers\nfig, axes = plt.subplots(2, 3, sharey=True, figsize=(15, 7))\ndf.plot.scatter(x='RoomService', y='Age', ax=axes[0, 0])\ndf.plot.scatter(x='FoodCourt', y='Age', ax=axes[0, 1])\ndf.plot.scatter(x='ShoppingMall', y='Age', ax=axes[0, 2])\ndf.plot.scatter(x='Spa', y='Age', ax=axes[1, 0])\ndf.plot.scatter(x='VRDeck', y='Age', ax=axes[1, 1])\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-02-19T23:51:57.797528Z","iopub.execute_input":"2023-02-19T23:51:57.797828Z","iopub.status.idle":"2023-02-19T23:51:58.488524Z","shell.execute_reply.started":"2023-02-19T23:51:57.797805Z","shell.execute_reply":"2023-02-19T23:51:58.487625Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Cap RoomService at 9000\ndf.loc[df.RoomService.gt(9000), 'RoomService'] = 9000\n\n# Cap FoodCourt at 22000\ndf.loc[df.FoodCourt.gt(22000), 'FoodCourt'] = 22000\n\n# Cap ShoppingMall at 11000\ndf.loc[df.ShoppingMall.gt(11000), 'ShoppingMall'] = 11000\n\n# Cap Spa at 17000\ndf.loc[df.Spa.gt(17000), 'Spa'] = 17000\n\n# Cap VRDeck at 21000\ndf.loc[df.VRDeck.gt(21000), 'VRDeck'] = 21000\n\n# Run previous cell again to visualize the result","metadata":{"execution":{"iopub.status.busy":"2023-02-19T23:51:58.490879Z","iopub.execute_input":"2023-02-19T23:51:58.491375Z","iopub.status.idle":"2023-02-19T23:51:58.500925Z","shell.execute_reply.started":"2023-02-19T23:51:58.491349Z","shell.execute_reply":"2023-02-19T23:51:58.500058Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Impute amenities","metadata":{}},{"cell_type":"code","source":"# Check if the passengers in CryoSleep have always zero values for amenities\namenities = ['RoomService', 'FoodCourt', 'ShoppingMall', 'Spa', 'VRDeck']\n\ndf.loc[df.CryoSleep.eq(True), amenities].sum()","metadata":{"execution":{"iopub.status.busy":"2023-02-19T23:51:58.501979Z","iopub.execute_input":"2023-02-19T23:51:58.502251Z","iopub.status.idle":"2023-02-19T23:51:58.523029Z","shell.execute_reply.started":"2023-02-19T23:51:58.502227Z","shell.execute_reply":"2023-02-19T23:51:58.522042Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# For passengers in CryoSleep we impute zero for missing amenities values\ndf.loc[df.CryoSleep.eq(True), amenities] = 0\n\n# Where summ of amenities is 0 we also impute 0 for missing values\nzero_amenities = df[amenities].sum(axis=1).eq(0)\ndf.loc[zero_amenities, amenities] = 0\n\n# Impute median for values greater than 0 for each amenities column where passengers are not in CryoSleep\nfor i in amenities: \n    df.loc[df[i].isna(), i] = df.loc[df[i].gt(0), i].median()","metadata":{"execution":{"iopub.status.busy":"2023-02-19T23:51:58.524431Z","iopub.execute_input":"2023-02-19T23:51:58.524789Z","iopub.status.idle":"2023-02-19T23:51:58.543743Z","shell.execute_reply.started":"2023-02-19T23:51:58.524755Z","shell.execute_reply":"2023-02-19T23:51:58.542856Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Create Total_expenses","metadata":{}},{"cell_type":"code","source":"# We will calculate the total expenses the passenger had on amenities\ndf['Total_expenses'] = df[amenities].sum(axis=1)","metadata":{"execution":{"iopub.status.busy":"2023-02-19T23:51:58.544973Z","iopub.execute_input":"2023-02-19T23:51:58.545248Z","iopub.status.idle":"2023-02-19T23:51:58.55069Z","shell.execute_reply.started":"2023-02-19T23:51:58.545225Z","shell.execute_reply":"2023-02-19T23:51:58.549709Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Impute CryoSleep","metadata":{}},{"cell_type":"code","source":"# Impute CryoSleep = False where Total_expenses are greater than 0\ndf.loc[(df.CryoSleep.isna() & df.Total_expenses.gt(0)), 'CryoSleep'] = False","metadata":{"execution":{"iopub.status.busy":"2023-02-19T23:51:58.551625Z","iopub.execute_input":"2023-02-19T23:51:58.551842Z","iopub.status.idle":"2023-02-19T23:51:58.5613Z","shell.execute_reply.started":"2023-02-19T23:51:58.551821Z","shell.execute_reply":"2023-02-19T23:51:58.560429Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Impute VIP","metadata":{}},{"cell_type":"code","source":"# Check the minimum Age for passengers with VIP status\ndf.groupby('VIP').Age.min()","metadata":{"execution":{"iopub.status.busy":"2023-02-19T23:51:58.562228Z","iopub.execute_input":"2023-02-19T23:51:58.562447Z","iopub.status.idle":"2023-02-19T23:51:58.579438Z","shell.execute_reply.started":"2023-02-19T23:51:58.562425Z","shell.execute_reply":"2023-02-19T23:51:58.578142Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Underage passengers don't have VIP status","metadata":{}},{"cell_type":"code","source":"# Check VIPs by HomePlanet and Destination\ndf.groupby(['HomePlanet', 'Destination']).VIP.value_counts()","metadata":{"execution":{"iopub.status.busy":"2023-02-19T23:51:58.58316Z","iopub.execute_input":"2023-02-19T23:51:58.58347Z","iopub.status.idle":"2023-02-19T23:51:58.598279Z","shell.execute_reply.started":"2023-02-19T23:51:58.583444Z","shell.execute_reply":"2023-02-19T23:51:58.597343Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"- There are a lot of passengers from Earth, but no VIPs\n- There are no VIPs between passengers from Mars that goes to Cancri \n- VIPs going to Cancri are just from Europa","metadata":{}},{"cell_type":"code","source":"# Impute VIP = False for underage passengers\ndf.loc[(df.VIP.isna() & (df.Age < 18)), 'VIP'] = False","metadata":{"execution":{"iopub.status.busy":"2023-02-19T23:51:58.599389Z","iopub.execute_input":"2023-02-19T23:51:58.600068Z","iopub.status.idle":"2023-02-19T23:51:58.606484Z","shell.execute_reply.started":"2023-02-19T23:51:58.600042Z","shell.execute_reply":"2023-02-19T23:51:58.605368Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Impute VIP = False for passengers from Earth\ndf.loc[(df.VIP.isna() & (df.HomePlanet == 'Earth')), 'VIP'] = False\n\n# Impute VIP = False for passengers from Mars that goes to Cancri\ndf.loc[(df.VIP.isna() \n        & (df.HomePlanet.eq('Mars'))\n        & (df.Destination.eq('55 Cancri e'))), 'VIP'] = False","metadata":{"execution":{"iopub.status.busy":"2023-02-19T23:51:58.607682Z","iopub.execute_input":"2023-02-19T23:51:58.607956Z","iopub.status.idle":"2023-02-19T23:51:58.621051Z","shell.execute_reply.started":"2023-02-19T23:51:58.607931Z","shell.execute_reply":"2023-02-19T23:51:58.62047Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Check VIPs and CryoSleep by Deck\ndf.groupby(['VIP', 'CryoSleep']).Deck.value_counts()","metadata":{"execution":{"iopub.status.busy":"2023-02-19T23:51:58.622798Z","iopub.execute_input":"2023-02-19T23:51:58.623103Z","iopub.status.idle":"2023-02-19T23:51:58.639126Z","shell.execute_reply.started":"2023-02-19T23:51:58.623078Z","shell.execute_reply":"2023-02-19T23:51:58.637999Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"- There are no VIPs on decks G and T\n- VIPs in CryoSleep are just on the decks A to D","metadata":{}},{"cell_type":"code","source":"# Impute VIP = False for passengers on deck G and T\ndf.loc[(df.VIP.isna() \n        & (df.Deck.isin(['G', 'T']))), 'VIP'] = False\n\n# Impute VIP = True for passengers that are not on decks A to D and not in CryoSleep\ndf.loc[df.VIP.isna() \n       & df.CryoSleep.eq(False) \n       & ~df.Deck.isin(['A', 'B', 'C', 'D']), 'VIP'] = True","metadata":{"execution":{"iopub.status.busy":"2023-02-19T23:51:58.640144Z","iopub.execute_input":"2023-02-19T23:51:58.640365Z","iopub.status.idle":"2023-02-19T23:51:58.650758Z","shell.execute_reply.started":"2023-02-19T23:51:58.640344Z","shell.execute_reply":"2023-02-19T23:51:58.649868Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Impute HomePlanet","metadata":{}},{"cell_type":"code","source":"# From previous analysis VIPs going to Cancri are just from Europa\ndf.loc[(df.HomePlanet.isna() \n        & df.VIP.eq(True) \n        & df.Destination.eq('55 Cancri e')), 'HomePlanet'] = 'Europa'","metadata":{"execution":{"iopub.status.busy":"2023-02-19T23:51:58.651943Z","iopub.execute_input":"2023-02-19T23:51:58.652238Z","iopub.status.idle":"2023-02-19T23:51:58.66471Z","shell.execute_reply.started":"2023-02-19T23:51:58.65221Z","shell.execute_reply":"2023-02-19T23:51:58.663704Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Check if all the passengers from the same group have departed from the same HomePlanet\ndf.groupby('Pass_group').HomePlanet.nunique().gt(1).sum()","metadata":{"execution":{"iopub.status.busy":"2023-02-19T23:51:58.666233Z","iopub.execute_input":"2023-02-19T23:51:58.666635Z","iopub.status.idle":"2023-02-19T23:51:58.679033Z","shell.execute_reply.started":"2023-02-19T23:51:58.666603Z","shell.execute_reply":"2023-02-19T23:51:58.678063Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Create a Pass_group-HomePlanet dictionary\npresent_values = ~df.Pass_group.isna() & ~df.HomePlanet.isna()\ngroup_home_map = (df.loc[present_values, ['Pass_group', 'HomePlanet']]\n            .set_index('Pass_group').to_dict()['HomePlanet'])\n\n# Impute HomePlanet from dictionary\ndf.loc[df.HomePlanet.isna(), 'HomePlanet'] = df.Pass_group.map(group_home_map)","metadata":{"execution":{"iopub.status.busy":"2023-02-19T23:51:58.680356Z","iopub.execute_input":"2023-02-19T23:51:58.680678Z","iopub.status.idle":"2023-02-19T23:51:58.707796Z","shell.execute_reply.started":"2023-02-19T23:51:58.680647Z","shell.execute_reply":"2023-02-19T23:51:58.707179Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Analyse HomePlanet-Deck distribution\ndf.groupby('HomePlanet').Deck.value_counts()","metadata":{"execution":{"iopub.status.busy":"2023-02-19T23:51:58.708716Z","iopub.execute_input":"2023-02-19T23:51:58.709294Z","iopub.status.idle":"2023-02-19T23:51:58.718715Z","shell.execute_reply.started":"2023-02-19T23:51:58.709268Z","shell.execute_reply":"2023-02-19T23:51:58.717832Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"- Decks T, A, B, C are just from Europa\n- Deck G is just from Earth\n","metadata":{}},{"cell_type":"code","source":"# Impute HomePlanet based on previous distribution analysis\ndf.loc[(df.HomePlanet.isna() \n        & df.Deck.isin(['T', 'A', 'B', 'C',])), 'HomePlanet'] = 'Europa'\n\ndf.loc[(df.HomePlanet.isna() & df.Deck.eq('G')), 'HomePlanet'] = 'Earth'\n\ndf.loc[(df.HomePlanet.isna() & df.Deck.eq('G')), 'HomePlanet'] = 'Earth'","metadata":{"execution":{"iopub.status.busy":"2023-02-19T23:51:58.719754Z","iopub.execute_input":"2023-02-19T23:51:58.719976Z","iopub.status.idle":"2023-02-19T23:51:58.73245Z","shell.execute_reply.started":"2023-02-19T23:51:58.719954Z","shell.execute_reply":"2023-02-19T23:51:58.73158Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Check if all the passengers with the same Lastname have departed from the same HomePlanet\ndf.groupby('Lastname').HomePlanet.nunique().gt(1).sum()","metadata":{"execution":{"iopub.status.busy":"2023-02-19T23:51:58.733424Z","iopub.execute_input":"2023-02-19T23:51:58.73366Z","iopub.status.idle":"2023-02-19T23:51:58.752529Z","shell.execute_reply.started":"2023-02-19T23:51:58.73364Z","shell.execute_reply":"2023-02-19T23:51:58.751711Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Create a Lastname-HomePlanet dictionary\npresent_values = ~df.Lastname.isna() & ~df.HomePlanet.isna()\nlastname_home_map = (df.loc[present_values, ['Lastname', 'HomePlanet']]\n            .set_index('Lastname').to_dict()['HomePlanet'])\n\n# Impute HomePlanet from dictionary\ndf.loc[df.HomePlanet.isna(), 'HomePlanet'] = df.Lastname.map(lastname_home_map)","metadata":{"execution":{"iopub.status.busy":"2023-02-19T23:51:58.753771Z","iopub.execute_input":"2023-02-19T23:51:58.754065Z","iopub.status.idle":"2023-02-19T23:51:58.781814Z","shell.execute_reply.started":"2023-02-19T23:51:58.754037Z","shell.execute_reply":"2023-02-19T23:51:58.78091Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Impute Age","metadata":{}},{"cell_type":"code","source":"# Impute median Age for people with VIP status\ndf.loc[((df.VIP == True) & df.Age.isna()), 'Age'] = df.loc[(df.VIP == True), 'Age'].median()\n\n# Impute median Age for people that have expenses\ndf.loc[(df.Age.isna() \n        & df.Total_expenses.gt(0)), 'Age'] = df.loc[df.Total_expenses.gt(0), 'Age'].median()\n\n# Impute median Age for people with no expenses and not in CryoSleep\ndf.loc[(df.Age.isna() \n        & df.Total_expenses.eq(0)\n        & df.CryoSleep.eq(False)), 'Age'] = df.loc[(df.Total_expenses.eq(0) \n                                                    & df.CryoSleep.eq(False)), 'Age'].median()\n\n# Impute an overall median Age for people not included in previous groups\ndf.Age.fillna(df.Age.median(), inplace=True)","metadata":{"execution":{"iopub.status.busy":"2023-02-19T23:51:58.782941Z","iopub.execute_input":"2023-02-19T23:51:58.78323Z","iopub.status.idle":"2023-02-19T23:51:58.799383Z","shell.execute_reply.started":"2023-02-19T23:51:58.783206Z","shell.execute_reply":"2023-02-19T23:51:58.798544Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Impute Cab_num","metadata":{}},{"cell_type":"code","source":"df.Cab_num.fillna(df.Cab_num.median(), inplace=True)","metadata":{"execution":{"iopub.status.busy":"2023-02-19T23:51:58.800359Z","iopub.execute_input":"2023-02-19T23:51:58.800604Z","iopub.status.idle":"2023-02-19T23:51:58.807253Z","shell.execute_reply.started":"2023-02-19T23:51:58.80058Z","shell.execute_reply":"2023-02-19T23:51:58.806336Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Create Group_members","metadata":{}},{"cell_type":"code","source":"# We count the number of passengers in each group\nGroup_members = df.Pass_group.value_counts().to_dict()\ndf['Group_members'] = df.Pass_group.map(Group_members)","metadata":{"execution":{"iopub.status.busy":"2023-02-19T23:51:58.808492Z","iopub.execute_input":"2023-02-19T23:51:58.809298Z","iopub.status.idle":"2023-02-19T23:51:58.829823Z","shell.execute_reply.started":"2023-02-19T23:51:58.809271Z","shell.execute_reply":"2023-02-19T23:51:58.828986Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Create Cabin_members","metadata":{}},{"cell_type":"code","source":"# We count the number of members in each cabin\nCabin_members = df.Cabin.value_counts().to_dict()\ndf['Cabin_members'] = df.Cabin.map(Cabin_members)\n\n# Impute mean for missing cabin\ndf.Cabin_members.fillna(df.Cabin_members.mean(), inplace=True)","metadata":{"execution":{"iopub.status.busy":"2023-02-19T23:51:58.831266Z","iopub.execute_input":"2023-02-19T23:51:58.831638Z","iopub.status.idle":"2023-02-19T23:51:58.855973Z","shell.execute_reply.started":"2023-02-19T23:51:58.831609Z","shell.execute_reply":"2023-02-19T23:51:58.85508Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Create Deck_transp_ratio","metadata":{}},{"cell_type":"code","source":"# Create full data frame for analysis\nX = df[:X_max_index]\ntest_df = df[X_max_index:]\nfull_df = pd.concat([X, y], axis=1).copy()\n\n# Total passengers by Deck\ndeck_total_pass = full_df.groupby('Deck').Deck.count()\n\n# Total Transported by Deck\ndeck_total_transported = full_df.groupby('Deck').Transported.sum()\n\n# Dictionary with Deck_transp_ratio\nDeck_transp_ratio = (deck_total_transported / deck_total_pass).to_dict()\n\n# Create Deck_transp_ratio\ndf['Deck_transp_ratio'] = df.Deck.map(Deck_transp_ratio)\ndf.Deck_transp_ratio.fillna(df.Deck_transp_ratio.mean(), inplace=True)","metadata":{"execution":{"iopub.status.busy":"2023-02-19T23:51:58.857085Z","iopub.execute_input":"2023-02-19T23:51:58.85734Z","iopub.status.idle":"2023-02-19T23:51:58.882685Z","shell.execute_reply.started":"2023-02-19T23:51:58.857317Z","shell.execute_reply":"2023-02-19T23:51:58.881653Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Create Deck_side_transp_ratio","metadata":{}},{"cell_type":"code","source":"# Total passengers by Deck_side\ndeck_side_total = full_df.groupby('Deck_side').Deck.count()\n\n# Total Transported by Deck_side\ndeck_side_transported = full_df.groupby('Deck_side').Transported.sum()\n\n# Dictionary with Deck_side_transp_ratio\nDeck_side_transp_ratio = (deck_side_transported / deck_side_total).to_dict()\n\n# Create Deck_side_transp_ratio\ndf['Deck_side_transp_ratio'] = df.Deck_side.map(Deck_side_transp_ratio)\ndf.Deck_side_transp_ratio.fillna(df.Deck_side_transp_ratio.mean(), inplace=True)","metadata":{"execution":{"iopub.status.busy":"2023-02-19T23:51:58.883703Z","iopub.execute_input":"2023-02-19T23:51:58.883943Z","iopub.status.idle":"2023-02-19T23:51:58.895749Z","shell.execute_reply.started":"2023-02-19T23:51:58.883921Z","shell.execute_reply":"2023-02-19T23:51:58.894872Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Drop further unused columns\ncol_drop = ['PassengerId', 'Cabin', 'Name', 'Lastname']\ndf = df.drop(col_drop, axis=1)","metadata":{"execution":{"iopub.status.busy":"2023-02-19T23:51:58.900895Z","iopub.execute_input":"2023-02-19T23:51:58.901179Z","iopub.status.idle":"2023-02-19T23:51:58.907115Z","shell.execute_reply.started":"2023-02-19T23:51:58.901155Z","shell.execute_reply":"2023-02-19T23:51:58.906412Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Impute and encode categorical features","metadata":{}},{"cell_type":"code","source":"# List of categorical columns\ncateg_cols = list(df.select_dtypes(['object', 'category']).columns)\n\n# Impute categoricals with most frequent value\ncat_imputer = SimpleImputer(strategy='constant', fill_value='Missing')\n\ndf_cat = pd.DataFrame(cat_imputer.fit_transform(df[categ_cols]), \n                      columns=df[categ_cols].columns)\n\n# Encode categoricals\ndf_cat = pd.get_dummies(df_cat)","metadata":{"execution":{"iopub.status.busy":"2023-02-19T23:51:58.907888Z","iopub.execute_input":"2023-02-19T23:51:58.908333Z","iopub.status.idle":"2023-02-19T23:51:58.939058Z","shell.execute_reply.started":"2023-02-19T23:51:58.908311Z","shell.execute_reply":"2023-02-19T23:51:58.938182Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Impute numericals","metadata":{}},{"cell_type":"code","source":"# List of numerical columns\nnum_cols = list(df.select_dtypes(['int64', 'float64']).columns)\n\n# Concatenate with encoded categorical columns\ndf = pd.concat([df_cat, df[num_cols]], axis=1)\n\n# Impute numericals\nit_imp = IterativeImputer()\ndf = pd.DataFrame(it_imp.fit_transform(df), columns=df.columns)","metadata":{"execution":{"iopub.status.busy":"2023-02-19T23:51:58.940426Z","iopub.execute_input":"2023-02-19T23:51:58.940738Z","iopub.status.idle":"2023-02-19T23:52:02.790332Z","shell.execute_reply.started":"2023-02-19T23:51:58.940705Z","shell.execute_reply":"2023-02-19T23:52:02.788926Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Feature engineering","metadata":{}},{"cell_type":"code","source":"# Create a full data frame for analysis\nX = df[:X_max_index]\nfull_df = pd.concat([X, y], axis=1)\nfull_df['Non_zero_expenses'] = full_df.loc[full_df.Total_expenses.gt(0), 'Total_expenses']","metadata":{"execution":{"iopub.status.busy":"2023-02-19T23:52:02.792585Z","iopub.execute_input":"2023-02-19T23:52:02.794481Z","iopub.status.idle":"2023-02-19T23:52:02.816413Z","shell.execute_reply.started":"2023-02-19T23:52:02.794445Z","shell.execute_reply":"2023-02-19T23:52:02.815069Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Function for kde plotting\ndef transported_chance_by(feature, xticks=None, xlim=None):\n    transported = full_df[full_df.Transported == 1]\n    not_transported = full_df[full_df.Transported == 0]\n\n    plt.figure(figsize=(10, 5))\n\n    transported[feature].plot(kind='kde', label='transported')\n    not_transported[feature].plot(kind='kde', label='not_transported')\n    \n    plt.xlim(xlim)\n    plt.xticks(xticks)\n    plt.legend()\n    plt.grid()\n    plt.xlabel(feature)\n    plt.show()","metadata":{"execution":{"iopub.status.busy":"2023-02-19T23:52:02.819319Z","iopub.execute_input":"2023-02-19T23:52:02.820159Z","iopub.status.idle":"2023-02-19T23:52:02.835186Z","shell.execute_reply.started":"2023-02-19T23:52:02.820131Z","shell.execute_reply":"2023-02-19T23:52:02.834046Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Create Age_group feature","metadata":{}},{"cell_type":"code","source":"# Transported by Age\ntransported_chance_by('Age', np.arange(0, 81, 5), (0, 80))","metadata":{"execution":{"iopub.status.busy":"2023-02-19T23:52:02.837962Z","iopub.execute_input":"2023-02-19T23:52:02.839339Z","iopub.status.idle":"2023-02-19T23:52:03.174737Z","shell.execute_reply.started":"2023-02-19T23:52:02.839303Z","shell.execute_reply":"2023-02-19T23:52:03.173869Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"By curves intersection points we can separate 3 age groups","metadata":{}},{"cell_type":"code","source":"# Create Age_group feature\ndf['Age_group'] = pd.cut(x=df.Age, labels=[1, 3, 2],\n                         bins=[-1, 17, 43, df.Age.max()]).astype('float')","metadata":{"execution":{"iopub.status.busy":"2023-02-19T23:52:03.176099Z","iopub.execute_input":"2023-02-19T23:52:03.17645Z","iopub.status.idle":"2023-02-19T23:52:03.182864Z","shell.execute_reply.started":"2023-02-19T23:52:03.176428Z","shell.execute_reply":"2023-02-19T23:52:03.18225Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Create Total_expenses_group feature","metadata":{}},{"cell_type":"code","source":"# Transported by Non_zero_expenses\ntransported_chance_by('Non_zero_expenses', np.arange(0, 9000, 500), (0, 9000))","metadata":{"execution":{"iopub.status.busy":"2023-02-19T23:52:03.183694Z","iopub.execute_input":"2023-02-19T23:52:03.184208Z","iopub.status.idle":"2023-02-19T23:52:03.480467Z","shell.execute_reply.started":"2023-02-19T23:52:03.184184Z","shell.execute_reply":"2023-02-19T23:52:03.479814Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"By curves intersection points we can separate 2 Total_expenses groups","metadata":{}},{"cell_type":"code","source":"# Create Total_expenses_group feature additionally separating 0 expenses group\ndf['Total_expenses_group'] = pd.cut(x=df.Total_expenses, labels=[3, 1, 2],\n                         bins=[-1, 1, 2250, df.Total_expenses.max()]).astype('float')","metadata":{"execution":{"iopub.status.busy":"2023-02-19T23:52:03.481355Z","iopub.execute_input":"2023-02-19T23:52:03.481881Z","iopub.status.idle":"2023-02-19T23:52:03.488737Z","shell.execute_reply.started":"2023-02-19T23:52:03.481856Z","shell.execute_reply":"2023-02-19T23:52:03.487924Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Create Cab_group feature","metadata":{}},{"cell_type":"code","source":"# Transported by Cab_num\ntransported_chance_by('Cab_num', np.arange(0, 2000, 100), (0, 2000))","metadata":{"execution":{"iopub.status.busy":"2023-02-19T23:52:03.490945Z","iopub.execute_input":"2023-02-19T23:52:03.491333Z","iopub.status.idle":"2023-02-19T23:52:03.807878Z","shell.execute_reply.started":"2023-02-19T23:52:03.491308Z","shell.execute_reply":"2023-02-19T23:52:03.806893Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"By curves intersection points we can separate 4 cabin groups","metadata":{}},{"cell_type":"code","source":"# Create Cab_group feature\ndf['Cab_group'] = pd.cut(x=df.Cab_num, labels=[3, 2, 4, 1],\n                         bins=[-1, 300, 690, 1170, df.Cab_num.max()]).astype('float')","metadata":{"execution":{"iopub.status.busy":"2023-02-19T23:52:03.809188Z","iopub.execute_input":"2023-02-19T23:52:03.810919Z","iopub.status.idle":"2023-02-19T23:52:03.81833Z","shell.execute_reply.started":"2023-02-19T23:52:03.810871Z","shell.execute_reply":"2023-02-19T23:52:03.817597Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Create Pass_group_type feature","metadata":{}},{"cell_type":"code","source":"# Transported by Pass_group\ntransported_chance_by('Pass_group', np.arange(0, 10000, 500), (0, 10000))","metadata":{"execution":{"iopub.status.busy":"2023-02-19T23:52:03.819273Z","iopub.execute_input":"2023-02-19T23:52:03.820219Z","iopub.status.idle":"2023-02-19T23:52:04.141053Z","shell.execute_reply.started":"2023-02-19T23:52:03.820192Z","shell.execute_reply":"2023-02-19T23:52:04.140073Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"By curves intersection points we can separate 3 passengers group type","metadata":{}},{"cell_type":"code","source":"# Create Pass_group_type feature\ndf['Pass_group_type'] = pd.cut(x=df.Pass_group, labels=[2, 3, 1], \n                               bins=[-1, 3400, 7300, df.Pass_group.max()]).astype('float')","metadata":{"execution":{"iopub.status.busy":"2023-02-19T23:52:04.142323Z","iopub.execute_input":"2023-02-19T23:52:04.143242Z","iopub.status.idle":"2023-02-19T23:52:04.151154Z","shell.execute_reply.started":"2023-02-19T23:52:04.143206Z","shell.execute_reply":"2023-02-19T23:52:04.150348Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Standardization","metadata":{}},{"cell_type":"code","source":"# Apply np.log to normalize the skewed right data\nskewed_features = ['RoomService', 'FoodCourt', 'ShoppingMall', \n                   'Spa', 'VRDeck', 'Total_expenses']\ndf[skewed_features] = df[skewed_features].apply(np.log1p)\n\n# Standardize \nstd_scaler = StandardScaler()\n\ndf_scaled = std_scaler.fit_transform(df)\ndf = pd.DataFrame(df_scaled, columns=df.columns)","metadata":{"execution":{"iopub.status.busy":"2023-02-19T23:52:04.152276Z","iopub.execute_input":"2023-02-19T23:52:04.152528Z","iopub.status.idle":"2023-02-19T23:52:04.170592Z","shell.execute_reply.started":"2023-02-19T23:52:04.152505Z","shell.execute_reply":"2023-02-19T23:52:04.169549Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Drop columns not used for modeling\ncol_drop = ['Cab_num', 'Pass_group']\ndf = df.drop(col_drop, axis=1)","metadata":{"execution":{"iopub.status.busy":"2023-02-19T23:52:04.171456Z","iopub.execute_input":"2023-02-19T23:52:04.171827Z","iopub.status.idle":"2023-02-19T23:52:04.176721Z","shell.execute_reply.started":"2023-02-19T23:52:04.171802Z","shell.execute_reply":"2023-02-19T23:52:04.175975Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Split train and test data","metadata":{}},{"cell_type":"code","source":"X = df[:X_max_index]\ntest_df = df[X_max_index:]","metadata":{"execution":{"iopub.status.busy":"2023-02-19T23:52:04.177696Z","iopub.execute_input":"2023-02-19T23:52:04.178001Z","iopub.status.idle":"2023-02-19T23:52:04.184818Z","shell.execute_reply.started":"2023-02-19T23:52:04.17797Z","shell.execute_reply":"2023-02-19T23:52:04.184037Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Processed data correlation","metadata":{}},{"cell_type":"code","source":"# Concatenate into a full dataset\nfull_df = pd.concat([X, y], axis=1)\n\ncorrelation = full_df.corr()['Transported'].sort_values(ascending=False)\n\n# Correlation graph\ncorrelation[1:].plot(kind='bar', figsize=(10,5), title='Transported dependency')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-02-19T23:52:04.196267Z","iopub.execute_input":"2023-02-19T23:52:04.196489Z","iopub.status.idle":"2023-02-19T23:52:04.537036Z","shell.execute_reply.started":"2023-02-19T23:52:04.196468Z","shell.execute_reply":"2023-02-19T23:52:04.535953Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Conclusion\nOn Spaceship Titanic is better to not be a sleeping passenger from Europa or to be awake with an all inclusive package with no extra expenses.","metadata":{}},{"cell_type":"markdown","source":"# Find best features\nThis cell is commented out as it takes long time to run and the resulted final_features are shown further","metadata":{}},{"cell_type":"code","source":"# # Define model\n# cat_model = CatBoostClassifier(thread_count=-1, verbose=False)\n\n# # Define and fit feature selector\n# sfs = SequentialFeatureSelector(cat_model, \n#                                 scoring='accuracy', \n#                                 direction = 'backward')\n# sfs.fit(X,y)\n\n# # List of the final features to be used for submission modeling\n# final_features = list(sfs.get_feature_names_out())","metadata":{"execution":{"iopub.status.busy":"2023-02-19T23:52:04.538266Z","iopub.execute_input":"2023-02-19T23:52:04.538542Z","iopub.status.idle":"2023-02-19T23:52:04.543038Z","shell.execute_reply.started":"2023-02-19T23:52:04.538487Z","shell.execute_reply":"2023-02-19T23:52:04.541818Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# From Feature selector we've got this list of final features to use\nfinal_features = [\n    'HomePlanet_Earth', 'HomePlanet_Mars', 'HomePlanet_Missing', 'CryoSleep_True',\n    'Destination_PSO J318.5-22', 'Destination_TRAPPIST-1e', 'Deck_A', 'Deck_Missing',\n    'Deck_T', 'Deck_side_P', 'Age', 'RoomService', 'ShoppingMall', 'Spa', 'VRDeck',\n    'Total_expenses', 'Group_members', 'Deck_transp_ratio', 'Total_expenses_group', 'Cab_group']","metadata":{"execution":{"iopub.status.busy":"2023-02-19T23:52:04.54423Z","iopub.execute_input":"2023-02-19T23:52:04.544489Z","iopub.status.idle":"2023-02-19T23:52:04.551799Z","shell.execute_reply.started":"2023-02-19T23:52:04.544466Z","shell.execute_reply":"2023-02-19T23:52:04.550883Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# CatBoost grid search parameter tuning\nThis cell is commented out as it takes long time to run and the resulted parameters are shown further","metadata":{}},{"cell_type":"code","source":"# # Define model\n# cat_model = CatBoostClassifier()\n\n# # Define parameters' grid\n# grid = {'verbose': [False],\n#         'thread_count': [-1],\n#         'depth': [4, 5, 6, 7],\n#         'iterations': [1000, 2000, 3000, 5000],\n#         'learning_rate': [0.001, 0.005, 0.01, 0.02]}\n\n# # Define GridSearchCV\n# grid_cat = GridSearchCV(estimator=cat_model, param_grid=grid, cv=3, n_jobs=-1)\n# grid_cat.fit(X[final_features], y)\n\n# params = grid_cat.best_params_\n\n# print('\\n Best Score:\\n', grid_cat.best_score_)\n# print('\\n Best parameters:\\n', params)","metadata":{"execution":{"iopub.status.busy":"2023-02-19T23:52:04.553146Z","iopub.execute_input":"2023-02-19T23:52:04.553398Z","iopub.status.idle":"2023-02-19T23:52:04.562764Z","shell.execute_reply.started":"2023-02-19T23:52:04.553375Z","shell.execute_reply":"2023-02-19T23:52:04.561852Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Best parameters\nparams =  {'depth': 6,\n           'iterations': 2000, \n           'learning_rate': 0.01, \n           'thread_count': -1, \n           'verbose': False}","metadata":{"execution":{"iopub.status.busy":"2023-02-19T23:52:04.564292Z","iopub.execute_input":"2023-02-19T23:52:04.564535Z","iopub.status.idle":"2023-02-19T23:52:04.575247Z","shell.execute_reply.started":"2023-02-19T23:52:04.564511Z","shell.execute_reply":"2023-02-19T23:52:04.574324Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Final model","metadata":{}},{"cell_type":"code","source":"# Define and fit the final model\ncat_model = CatBoostClassifier(**params)\ncat_model.fit(X[final_features], y)\n\n# Check accuracy and features importance\ncat_rmses = cross_val_score(cat_model, X[final_features], y, cv=5)\n\nprint(pd.Series(cat_rmses).describe())\nprint('\\n', cat_model.get_feature_importance(prettified=True))","metadata":{"execution":{"iopub.status.busy":"2023-02-19T23:52:04.57656Z","iopub.execute_input":"2023-02-19T23:52:04.576913Z","iopub.status.idle":"2023-02-19T23:52:32.671295Z","shell.execute_reply.started":"2023-02-19T23:52:04.576879Z","shell.execute_reply":"2023-02-19T23:52:32.670414Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Submission\n","metadata":{}},{"cell_type":"code","source":"# Make predictions which we will submit.\ntest_preds = cat_model.predict(test_df[final_features])\n\n# Save predictions in the format used for competition scoring\noutput = pd.DataFrame({'PassengerId': test_pass_id,\n                       'Transported': test_preds.astype(bool)})\n\noutput.to_csv('submission.csv', index=False)","metadata":{"execution":{"iopub.status.busy":"2023-02-19T23:52:32.672384Z","iopub.execute_input":"2023-02-19T23:52:32.673489Z","iopub.status.idle":"2023-02-19T23:52:32.690178Z","shell.execute_reply.started":"2023-02-19T23:52:32.673456Z","shell.execute_reply":"2023-02-19T23:52:32.689578Z"},"trusted":true},"execution_count":null,"outputs":[]}]}